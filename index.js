// Generated by CoffeeScript 1.7.1
var assert, assets, bodyParser, compress, cookieParser, errorHandler, express, favicon, logger, static_view, webapp_view;

express = require('express');

favicon = require('serve-favicon');

compress = require('compression');

bodyParser = require('body-parser');

cookieParser = require('cookie-parser');

errorHandler = require('errorhandler');

logger = require('morgan');

assets = require('connect-assets');

webapp_view = require('express-webapp-view');

static_view = require('express-static-view');

assert = require('assert');

exports.connect = function(options) {
  var CountHandler, Recore, StatsHandler, app;
  Recore = options.recore;
  assert(Recore, "recore instance required");
  app = express();
  app.locals.title = "Recore Backend";
  app.locals.subtitle = options.title;
  app.locals.models = JSON.stringify(Object.keys(Recore.getModels()));
  app.set('view engine', 'jade');
  app.set('views', "" + __dirname + "/views");
  app.use(favicon("" + __dirname + "/public/images/favicon.png"));
  app.use(compress());
  app.use(express["static"]("" + __dirname + "/public"));
  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded());
  app.use(cookieParser());
  app.use(Recore.connect({
    url: "/validator.js",
    namespace: 'validator'
  }));
  app.use(logger("dev"));
  StatsHandler = function(req, res, next) {
    return Recore.client.info(function(err, result) {
      if (!err) {
        res.locals.stats = result;
      }
      return next(err);
    });
  };
  CountHandler = function(req, res, next) {
    var counter, model, models, name, output, total, _count, _results;
    models = Recore.getModels();
    total = Object.keys(models).length;
    output = {};
    counter = 0;
    _count = function(name) {
      return model.count(function(err, count) {
        counter += 1;
        if (err) {
          return next(err);
        }
        output[name] = count;
        if (counter === total) {
          res.locals.count = output;
          return next();
        }
      });
    };
    _results = [];
    for (name in models) {
      model = models[name];
      _results.push(_count(name));
    }
    return _results;
  };
  app.get("/schema/:model", function(req, res) {
    var def, default_value, id_generator, ins, model, name, properties, type, _id_generator, _ref, _ref1;
    if (!req.params.model) {
      return res.status(404);
    }
    properties = {};
    model = Recore.getModel(req.params.model);
    ins = new model;
    _ref = ins.properties;
    for (name in _ref) {
      def = _ref[name];
      type = "";
      default_value = "";
      if (typeof def.defaultValue === "function") {
        default_value = def.defaultValue.toString();
        def.defaultValue = "[Function]";
      }
      if (typeof def.type === 'function') {
        type = def.type.toString();
        def.type = "[Function]";
      }
      properties[name] = {
        type: (_ref1 = def.type) != null ? _ref1 : "string",
        _type: type,
        index: def.index,
        unique: def.unique,
        default_value: def.defaultValue,
        _default_value: default_value
      };
    }
    if (typeof ins.idGenerator === 'function') {
      id_generator = '[Function]';
      _id_generator = ins.idGenerator.toString();
    } else {
      id_generator = ins.idGenerator;
    }
    return res.send(JSON.stringify({
      name: req.params.model,
      id_generator: id_generator,
      _id_generator: _id_generator != null ? _id_generator : "",
      properties: properties
    }));
  });
  app.get("/model/:model/page/:page", function(req, res) {
    var model, number_per_page, page;
    if (!req.params.model) {
      return res.status(404);
    }
    page = req.params.page || 1;
    number_per_page = 30;
    model = Recore.getModels()[req.params.name];
    return model.sort({
      field: 'created_at',
      direction: 'DESC',
      start: (page - 1) * number_per_page,
      limit: number_per_page
    }, function(err, ids) {
      var all, counter, total;
      if (err) {
        return res.status(500);
      }
      all = [];
      counter = 0;
      total = ids.length;
      return ids.forEach(function(id) {
        return model.load(id, function(err, props) {
          counter += 1;
          if (err) {

          }
        });
      });
    });
  });
  app.get("/", static_view('layout'));
  app.use(errorHandler());
  app.on('mount', function(parent) {
    app.locals.base_uri = app.path();
    app.use(assets({
      src: "" + __dirname + "/public",
      helperContext: app.locals,
      servePath: app.path()
    }));
    return app.use("/templates", webapp_view.connect({
      apps: 'app',
      webroot: "" + __dirname + "/public/javascripts"
    }));
  });
  return app;
};
